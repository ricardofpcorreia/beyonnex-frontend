{"ast":null,"code":"var _jsxFileName = \"/Users/ricardocorreia/Code/beyonnex-frontend/src/components/TemperatureGauge.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport '../styles/TemperatureGauge.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TemperatureGauge = ({\n  initialMinTemp,\n  initialMaxTemp\n}) => {\n  _s();\n  // State for the current temperature\n  const [currentTemp, setCurrentTemp] = useState((initialMinTemp + initialMaxTemp) / 2);\n\n  // Ref for the SVG element to extract position info\n  const svgRef = useRef(null);\n\n  // Calculate the needle rotation in degrees based on the current temperature\n  const getRotationDegrees = temp => {\n    const range = initialMaxTemp - initialMinTemp;\n    const relativeValue = temp - initialMinTemp;\n    return relativeValue / range * 180;\n  };\n\n  // Update the temperature based on the angle\n  const setTemperatureFromAngle = angle => {\n    const range = initialMaxTemp - initialMinTemp;\n    const temp = angle / 180 * range + initialMinTemp;\n    setCurrentTemp(temp.toFixed(2)); // Set temperature to 2 decimal places\n  };\n\n  // Convert mouse coordinates to an angle\n  const getAngleFromMouseEvent = e => {\n    const svg = svgRef.current;\n    const rect = svg.getBoundingClientRect();\n    const center = {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height\n    };\n    const angle = Math.atan2(e.clientY - center.y, e.clientX - center.x) * (180 / Math.PI);\n    return angle;\n  };\n\n  // Handle mouse movement\n  const handleMouseMove = e => {\n    const angle = getAngleFromMouseEvent(e);\n    if (angle >= -90 && angle <= 90) {\n      // Limit angle between -90 and 90 degrees\n      setTemperatureFromAngle(angle + 90); // Adjust angle to match our gauge's scale\n    }\n  };\n\n  // Start tracking mouse movement\n  const handleMouseDown = e => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n  };\n\n  // Stop tracking mouse movement\n  const handleMouseUp = () => {\n    document.removeEventListener('mousemove', handleMouseMove);\n    document.removeEventListener('mouseup', handleMouseUp);\n  };\n\n  // Inline styles for the needle\n  const needleStyle = {\n    transform: `rotate(${getRotationDegrees(currentTemp) - 90}deg)`,\n    // Subtract 90 to offset the SVG rotation\n    transformOrigin: '50% 100%' // Pivot at the bottom center of the needle\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thermostat-display\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"thermostat-svg\",\n      ref: svgRef,\n      viewBox: \"0 0 36 18\",\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"18\",\n        cy: \"18\",\n        r: \"17.5\",\n        fill: \"none\",\n        stroke: \"#333\",\n        strokeWidth: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        className: \"needle\",\n        x1: \"18\",\n        y1: \"1\",\n        x2: \"18\",\n        y2: \"18\",\n        style: needleStyle,\n        onMouseDown: handleMouseDown\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"temperature-display\",\n      children: [currentTemp, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n};\n_s(TemperatureGauge, \"Dk+CS+sFtQLN/jNg0vXCQGi51jQ=\");\n_c = TemperatureGauge;\nexport default TemperatureGauge;\nvar _c;\n$RefreshReg$(_c, \"TemperatureGauge\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","TemperatureGauge","initialMinTemp","initialMaxTemp","_s","currentTemp","setCurrentTemp","svgRef","getRotationDegrees","temp","range","relativeValue","setTemperatureFromAngle","angle","toFixed","getAngleFromMouseEvent","e","svg","current","rect","getBoundingClientRect","center","x","left","width","y","top","height","Math","atan2","clientY","clientX","PI","handleMouseMove","handleMouseDown","document","addEventListener","handleMouseUp","removeEventListener","needleStyle","transform","transformOrigin","className","children","ref","viewBox","cx","cy","r","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","x1","y1","x2","y2","style","onMouseDown","_c","$RefreshReg$"],"sources":["/Users/ricardocorreia/Code/beyonnex-frontend/src/components/TemperatureGauge.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport '../styles/TemperatureGauge.css';\n\nconst TemperatureGauge = ({ initialMinTemp, initialMaxTemp }) => {\n    // State for the current temperature\n    const [currentTemp, setCurrentTemp] = useState((initialMinTemp + initialMaxTemp) / 2);\n  \n    // Ref for the SVG element to extract position info\n    const svgRef = useRef(null);\n  \n    // Calculate the needle rotation in degrees based on the current temperature\n    const getRotationDegrees = (temp) => {\n      const range = initialMaxTemp - initialMinTemp;\n      const relativeValue = temp - initialMinTemp;\n      return (relativeValue / range) * 180;\n    };\n  \n    // Update the temperature based on the angle\n    const setTemperatureFromAngle = (angle) => {\n      const range = initialMaxTemp - initialMinTemp;\n      const temp = ((angle / 180) * range) + initialMinTemp;\n      setCurrentTemp(temp.toFixed(2)); // Set temperature to 2 decimal places\n    };\n  \n    // Convert mouse coordinates to an angle\n    const getAngleFromMouseEvent = (e) => {\n      const svg = svgRef.current;\n      const rect = svg.getBoundingClientRect();\n      const center = { x: rect.left + rect.width / 2, y: rect.top + rect.height };\n      const angle = Math.atan2(e.clientY - center.y, e.clientX - center.x) * (180 / Math.PI);\n      return angle;\n    };\n  \n    // Handle mouse movement\n    const handleMouseMove = (e) => {\n      const angle = getAngleFromMouseEvent(e);\n      if (angle >= -90 && angle <= 90) { // Limit angle between -90 and 90 degrees\n        setTemperatureFromAngle(angle + 90); // Adjust angle to match our gauge's scale\n      }\n    };\n  \n    // Start tracking mouse movement\n    const handleMouseDown = (e) => {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    };\n  \n    // Stop tracking mouse movement\n    const handleMouseUp = () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  \n    // Inline styles for the needle\n    const needleStyle = {\n      transform: `rotate(${getRotationDegrees(currentTemp) - 90}deg)`, // Subtract 90 to offset the SVG rotation\n      transformOrigin: '50% 100%' // Pivot at the bottom center of the needle\n    };\n  \n    return (\n      <div className='thermostat-display'>\n        <svg className='thermostat-svg' ref={svgRef} viewBox='0 0 36 18'>\n          {/* Outer circle for the thermostat */}\n          <circle cx='18' cy='18' r='17.5' fill='none' stroke='#333' strokeWidth='1' />\n          {/* Needle to indicate current temperature */}\n          <line className='needle' x1='18' y1='1' x2='18' y2='18' style={needleStyle} onMouseDown={handleMouseDown} />\n        </svg>\n        <div className='temperature-display'>{currentTemp}Â°C</div>\n      </div>\n    );\n  };\n  \n  export default TemperatureGauge;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}