{"ast":null,"code":"var _jsxFileName = \"/Users/ricardocorreia/Code/beyonnex-frontend/src/components/TemperatureGauge.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../styles/TemperatureGauge.css'; // Import the styles\n\n// Function to map temperature to gauge angle\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapTemperatureToAngle = (min, max, current) => {\n  const angleRange = 270; // Full range of the gauge\n  const temperatureRange = max - min;\n  const normalizedTemperature = current - min;\n  return normalizedTemperature / temperatureRange * angleRange - 135;\n};\n\n// TemperatureGauge component\nconst TemperatureGauge = ({\n  minTemp,\n  maxTemp\n}) => {\n  _s();\n  const [currentTemp, setCurrentTemp] = useState((minTemp + maxTemp) / 2);\n  const angle = mapTemperatureToAngle(minTemp, maxTemp, currentTemp);\n\n  // Handle change in temperature via the slider\n  const handleTemperatureChange = event => {\n    setCurrentTemp(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"temperature-gauge-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      className: \"temperature-gauge-svg\",\n      viewBox: \"0 0 200 100\",\n      children: [/*#__PURE__*/_jsxDEV(\"path\", {\n        d: \"M 20 100 A 80 80 0 0 1 180 100\",\n        fill: \"transparent\",\n        stroke: \"#d1d5db\",\n        strokeWidth: \"8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"100\",\n        y1: \"100\",\n        x2: \"100\",\n        y2: \"20\",\n        stroke: \"#2563eb\",\n        strokeWidth: \"4\",\n        transform: `rotate(${angle} 100 100)`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"temperature-gauge-text\",\n      children: [currentTemp, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"temperature-gauge-input\",\n      type: \"range\",\n      min: minTemp,\n      max: maxTemp,\n      value: currentTemp,\n      onChange: handleTemperatureChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(TemperatureGauge, \"mXE/NoAHf2vri0zYdGEjaD5SwWw=\");\n_c = TemperatureGauge;\nexport default TemperatureGauge;\nvar _c;\n$RefreshReg$(_c, \"TemperatureGauge\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","mapTemperatureToAngle","min","max","current","angleRange","temperatureRange","normalizedTemperature","TemperatureGauge","minTemp","maxTemp","_s","currentTemp","setCurrentTemp","angle","handleTemperatureChange","event","target","value","className","children","viewBox","d","fill","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","x1","y1","x2","y2","transform","type","onChange","_c","$RefreshReg$"],"sources":["/Users/ricardocorreia/Code/beyonnex-frontend/src/components/TemperatureGauge.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/TemperatureGauge.css'; // Import the styles\n\n// Function to map temperature to gauge angle\nconst mapTemperatureToAngle = (min, max, current) => {\n  const angleRange = 270; // Full range of the gauge\n  const temperatureRange = max - min;\n  const normalizedTemperature = current - min;\n  return (normalizedTemperature / temperatureRange) * angleRange - 135;\n};\n\n// TemperatureGauge component\nconst TemperatureGauge = ({ minTemp, maxTemp }) => {\n  const [currentTemp, setCurrentTemp] = useState((minTemp + maxTemp) / 2);\n  const angle = mapTemperatureToAngle(minTemp, maxTemp, currentTemp);\n\n  // Handle change in temperature via the slider\n  const handleTemperatureChange = (event) => {\n    setCurrentTemp(event.target.value);\n  };\n\n  return (\n    <div className=\"temperature-gauge-container\">\n        <svg className=\"temperature-gauge-svg\" viewBox=\"0 0 200 100\">\n            {/* Semi-circle for the gauge */}\n            <path d=\"M 20 100 A 80 80 0 0 1 180 100\" fill=\"transparent\" stroke=\"#d1d5db\" strokeWidth=\"8\" />\n            \n            {/* Line indicating the current temperature */}\n            <line x1=\"100\" y1=\"100\" x2=\"100\" y2=\"20\" stroke=\"#2563eb\" strokeWidth=\"4\"\n            transform={`rotate(${angle} 100 100)`} />\n            \n            {/* Text displaying the current temperature */}\n        </svg>\n      \n      {/* Text displaying the current temperature */}\n      <div className=\"temperature-gauge-text\">{currentTemp}Â°C</div>\n      \n      <input \n        className=\"temperature-gauge-input\"\n        type=\"range\"\n        min={minTemp}\n        max={maxTemp}\n        value={currentTemp}\n        onChange={handleTemperatureChange}\n      />\n    </div>\n  );\n};\n\nexport default TemperatureGauge;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gCAAgC,CAAC,CAAC;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,qBAAqB,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,KAAK;EACnD,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;EACxB,MAAMC,gBAAgB,GAAGH,GAAG,GAAGD,GAAG;EAClC,MAAMK,qBAAqB,GAAGH,OAAO,GAAGF,GAAG;EAC3C,OAAQK,qBAAqB,GAAGD,gBAAgB,GAAID,UAAU,GAAG,GAAG;AACtE,CAAC;;AAED;AACA,MAAMG,gBAAgB,GAAGA,CAAC;EAAEC,OAAO;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACjD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,CAACW,OAAO,GAAGC,OAAO,IAAI,CAAC,CAAC;EACvE,MAAMI,KAAK,GAAGb,qBAAqB,CAACQ,OAAO,EAAEC,OAAO,EAAEE,WAAW,CAAC;;EAElE;EACA,MAAMG,uBAAuB,GAAIC,KAAK,IAAK;IACzCH,cAAc,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACpC,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,6BAA6B;IAAAC,QAAA,gBACxCpB,OAAA;MAAKmB,SAAS,EAAC,uBAAuB;MAACE,OAAO,EAAC,aAAa;MAAAD,QAAA,gBAExDpB,OAAA;QAAMsB,CAAC,EAAC,gCAAgC;QAACC,IAAI,EAAC,aAAa;QAACC,MAAM,EAAC,SAAS;QAACC,WAAW,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAG/F7B,OAAA;QAAM8B,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,IAAI;QAACT,MAAM,EAAC,SAAS;QAACC,WAAW,EAAC,GAAG;QACzES,SAAS,EAAG,UAASpB,KAAM;MAAW;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGxC,CAAC,eAGR7B,OAAA;MAAKmB,SAAS,EAAC,wBAAwB;MAAAC,QAAA,GAAER,WAAW,EAAC,OAAE;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAE7D7B,OAAA;MACEmB,SAAS,EAAC,yBAAyB;MACnCgB,IAAI,EAAC,OAAO;MACZjC,GAAG,EAAEO,OAAQ;MACbN,GAAG,EAAEO,OAAQ;MACbQ,KAAK,EAAEN,WAAY;MACnBwB,QAAQ,EAAErB;IAAwB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAnCIH,gBAAgB;AAAA6B,EAAA,GAAhB7B,gBAAgB;AAqCtB,eAAeA,gBAAgB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}