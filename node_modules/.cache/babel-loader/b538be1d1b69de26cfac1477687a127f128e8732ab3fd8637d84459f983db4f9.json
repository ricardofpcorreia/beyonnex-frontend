{"ast":null,"code":"var _jsxFileName = \"/Users/ricardocorreia/Code/beyonnex-frontend/src/components/TemperatureGauge.js\";\nimport React, { useState } from 'react';\nimport '../styles/TemperatureGauge.css'; // Import the styles\n\n// Function to map temperature to gauge angle\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mapTemperatureToAngle = (min, max, current) => {\n  const angleRange = 270; // Full range of the gauge\n  const temperatureRange = max - min;\n  const normalizedTemperature = current - min;\n  return normalizedTemperature / temperatureRange * angleRange - 135;\n};\n\n// TemperatureGauge component\nconst TemperatureGauge = ({\n  minTemp,\n  maxTemp,\n  currentTemp\n}) => {\n  // Calculate the angle for the needle\n  const angle = (currentTemp - minTemp) / (maxTemp - minTemp) * 180 - 90; // Subtract 90 to offset the SVG rotation\n\n  // Inline styles for the needle's rotation\n  const needleStyle = {\n    transform: `rotate(${angle}deg)`,\n    transformOrigin: 'center bottom'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thermostat\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"200\",\n      height: \"110\",\n      viewBox: \"0 0 200 110\",\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: \"100\",\n        cy: \"100\",\n        r: \"95\",\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        fill: \"none\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"100\",\n        y1: \"100\",\n        x2: \"100\",\n        y2: \"5\",\n        stroke: \"black\",\n        strokeWidth: \"4\",\n        style: needleStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"5\",\n        y1: \"100\",\n        x2: \"25\",\n        y2: \"100\",\n        stroke: \"red\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n        x1: \"175\",\n        y1: \"100\",\n        x2: \"195\",\n        y2: \"100\",\n        stroke: \"red\",\n        strokeWidth: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"temperature\",\n      children: [currentTemp, \"\\xB0C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n};\n_c = TemperatureGauge;\nexport default TemperatureGauge;\nvar _c;\n$RefreshReg$(_c, \"TemperatureGauge\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","mapTemperatureToAngle","min","max","current","angleRange","temperatureRange","normalizedTemperature","TemperatureGauge","minTemp","maxTemp","currentTemp","angle","needleStyle","transform","transformOrigin","className","children","width","height","viewBox","cx","cy","r","stroke","strokeWidth","fill","fileName","_jsxFileName","lineNumber","columnNumber","x1","y1","x2","y2","style","_c","$RefreshReg$"],"sources":["/Users/ricardocorreia/Code/beyonnex-frontend/src/components/TemperatureGauge.js"],"sourcesContent":["import React, { useState } from 'react';\nimport '../styles/TemperatureGauge.css'; // Import the styles\n\n// Function to map temperature to gauge angle\nconst mapTemperatureToAngle = (min, max, current) => {\n  const angleRange = 270; // Full range of the gauge\n  const temperatureRange = max - min;\n  const normalizedTemperature = current - min;\n  return (normalizedTemperature / temperatureRange) * angleRange - 135;\n};\n\n// TemperatureGauge component\nconst TemperatureGauge = ({ minTemp, maxTemp, currentTemp }) => {\n    // Calculate the angle for the needle\n    const angle = ((currentTemp - minTemp) / (maxTemp - minTemp)) * 180 - 90; // Subtract 90 to offset the SVG rotation\n  \n    // Inline styles for the needle's rotation\n    const needleStyle = {\n      transform: `rotate(${angle}deg)`,\n      transformOrigin: 'center bottom',\n    };\n  \n    return (\n      <div className=\"thermostat\">\n        <svg width=\"200\" height=\"110\" viewBox=\"0 0 200 110\">\n          <circle cx=\"100\" cy=\"100\" r=\"95\" stroke=\"black\" strokeWidth=\"2\" fill=\"none\" />\n          <line x1=\"100\" y1=\"100\" x2=\"100\" y2=\"5\" stroke=\"black\" strokeWidth=\"4\" style={needleStyle} />\n          <line x1=\"5\" y1=\"100\" x2=\"25\" y2=\"100\" stroke=\"red\" strokeWidth=\"2\" />\n          <line x1=\"175\" y1=\"100\" x2=\"195\" y2=\"100\" stroke=\"red\" strokeWidth=\"2\" />\n        </svg>\n        <div className=\"temperature\">{currentTemp}Â°C</div>\n      </div>\n    );\n  };\n  \n  export default TemperatureGauge;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gCAAgC,CAAC,CAAC;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,qBAAqB,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,KAAK;EACnD,MAAMC,UAAU,GAAG,GAAG,CAAC,CAAC;EACxB,MAAMC,gBAAgB,GAAGH,GAAG,GAAGD,GAAG;EAClC,MAAMK,qBAAqB,GAAGH,OAAO,GAAGF,GAAG;EAC3C,OAAQK,qBAAqB,GAAGD,gBAAgB,GAAID,UAAU,GAAG,GAAG;AACtE,CAAC;;AAED;AACA,MAAMG,gBAAgB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC;AAAY,CAAC,KAAK;EAC5D;EACA,MAAMC,KAAK,GAAI,CAACD,WAAW,GAAGF,OAAO,KAAKC,OAAO,GAAGD,OAAO,CAAC,GAAI,GAAG,GAAG,EAAE,CAAC,CAAC;;EAE1E;EACA,MAAMI,WAAW,GAAG;IAClBC,SAAS,EAAG,UAASF,KAAM,MAAK;IAChCG,eAAe,EAAE;EACnB,CAAC;EAED,oBACEf,OAAA;IAAKgB,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACzBjB,OAAA;MAAKkB,KAAK,EAAC,KAAK;MAACC,MAAM,EAAC,KAAK;MAACC,OAAO,EAAC,aAAa;MAAAH,QAAA,gBACjDjB,OAAA;QAAQqB,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,CAAC,EAAC,IAAI;QAACC,MAAM,EAAC,OAAO;QAACC,WAAW,EAAC,GAAG;QAACC,IAAI,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC9E9B,OAAA;QAAM+B,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,GAAG;QAACV,MAAM,EAAC,OAAO;QAACC,WAAW,EAAC,GAAG;QAACU,KAAK,EAAEtB;MAAY;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7F9B,OAAA;QAAM+B,EAAE,EAAC,GAAG;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,IAAI;QAACC,EAAE,EAAC,KAAK;QAACV,MAAM,EAAC,KAAK;QAACC,WAAW,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACtE9B,OAAA;QAAM+B,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACC,EAAE,EAAC,KAAK;QAACV,MAAM,EAAC,KAAK;QAACC,WAAW,EAAC;MAAG;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtE,CAAC,eACN9B,OAAA;MAAKgB,SAAS,EAAC,aAAa;MAAAC,QAAA,GAAEN,WAAW,EAAC,OAAE;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACM,EAAA,GArBE5B,gBAAgB;AAuBpB,eAAeA,gBAAgB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}